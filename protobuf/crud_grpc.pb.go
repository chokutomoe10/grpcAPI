// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: crud.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrudClient is the client API for Crud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrudClient interface {
	GetAllUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Crud_GetAllUsersClient, error)
	CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Id, error)
	UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Status, error)
	DeleteUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error)
}

type crudClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudClient(cc grpc.ClientConnInterface) CrudClient {
	return &crudClient{cc}
}

func (c *crudClient) GetAllUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Crud_GetAllUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Crud_ServiceDesc.Streams[0], "/protobuf.Crud/GetAllUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudGetAllUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Crud_GetAllUsersClient interface {
	Recv() (*UserInfo, error)
	grpc.ClientStream
}

type crudGetAllUsersClient struct {
	grpc.ClientStream
}

func (x *crudGetAllUsersClient) Recv() (*UserInfo, error) {
	m := new(UserInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crudClient) CreateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/protobuf.Crud/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.Crud/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudClient) DeleteUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.Crud/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrudServer is the server API for Crud service.
// All implementations must embed UnimplementedCrudServer
// for forward compatibility
type CrudServer interface {
	GetAllUsers(*Empty, Crud_GetAllUsersServer) error
	CreateUser(context.Context, *UserInfo) (*Id, error)
	UpdateUser(context.Context, *UserInfo) (*Status, error)
	DeleteUser(context.Context, *Id) (*Status, error)
	mustEmbedUnimplementedCrudServer()
}

// UnimplementedCrudServer must be embedded to have forward compatible implementations.
type UnimplementedCrudServer struct {
}

func (UnimplementedCrudServer) GetAllUsers(*Empty, Crud_GetAllUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedCrudServer) CreateUser(context.Context, *UserInfo) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCrudServer) UpdateUser(context.Context, *UserInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedCrudServer) DeleteUser(context.Context, *Id) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedCrudServer) mustEmbedUnimplementedCrudServer() {}

// UnsafeCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrudServer will
// result in compilation errors.
type UnsafeCrudServer interface {
	mustEmbedUnimplementedCrudServer()
}

func RegisterCrudServer(s grpc.ServiceRegistrar, srv CrudServer) {
	s.RegisterService(&Crud_ServiceDesc, srv)
}

func _Crud_GetAllUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudServer).GetAllUsers(m, &crudGetAllUsersServer{stream})
}

type Crud_GetAllUsersServer interface {
	Send(*UserInfo) error
	grpc.ServerStream
}

type crudGetAllUsersServer struct {
	grpc.ServerStream
}

func (x *crudGetAllUsersServer) Send(m *UserInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Crud_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Crud/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).CreateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Crud/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).UpdateUser(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crud_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Crud/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServer).DeleteUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Crud_ServiceDesc is the grpc.ServiceDesc for Crud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Crud",
	HandlerType: (*CrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Crud_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Crud_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Crud_DeleteUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllUsers",
			Handler:       _Crud_GetAllUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "crud.proto",
}
